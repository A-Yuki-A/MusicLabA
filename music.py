# -*- coding: utf-8 -*-
"""music.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12Dhu5AY8Ve8T-o8duZS8xO09g3A384gS
"""

# このアプリを動かすには以下を requirements.txt に記載して、再デプロイしてください:
# streamlit
# numpy
# pandas
# sounddevice  # マイク録音用

import streamlit as st
import numpy as np
import pandas as pd
import wave
import io
import time
import sounddevice as sd

# アプリタイトル
st.title("音声波形表示とデジタル化プロセスのアニメーション")

# データ取得方法選択
mode = st.radio(
    "音声データの取得方法を選択してください",
    ("WAVファイル読み込み", "マイク録音")
)

data = None
sr = None

# WAVファイル読み込みモード
if mode == "WAVファイル読み込み":
    uploaded_file = st.file_uploader("WAVファイルをアップロード", type=["wav"])
    if uploaded_file:
        try:
            raw = uploaded_file.read()
            # バイトデータから読み込み
            wf = wave.open(io.BytesIO(raw), 'rb')
            sr = wf.getframerate()
            n_frames = wf.getnframes()
            frames = wf.readframes(n_frames)
            sampwidth = wf.getsampwidth()
            # サンプル幅に応じたdtype
            if sampwidth == 1:
                dtype = np.uint8
            elif sampwidth == 2:
                dtype = np.int16
            elif sampwidth == 4:
                dtype = np.int32
            else:
                dtype = np.int16
            samples = np.frombuffer(frames, dtype=dtype).astype(np.float32)
            # モノラル化
            if wf.getnchannels() > 1:
                samples = samples.reshape(-1, wf.getnchannels())[:, 0]
            data = samples
            st.success(f"WAV読み込み成功 (fs={sr} Hz)")
        except Exception as e:
            st.error(f"WAV読み込みエラー: {e}")
            st.stop()

# マイク録音モード
elif mode == "マイク録音":
    duration = st.slider("録音時間 (秒)", min_value=1, max_value=10, value=5)
    if st.button("録音開始"):
        st.info(f"録音中... {duration} 秒")
        sr = 44100
        recording = sd.rec(int(duration * sr), samplerate=sr, channels=1, dtype='float32')
        sd.wait()
        data = recording.flatten()
        st.success("録音完了！")

# データ処理開始
if data is not None and sr is not None:
    # 時間軸を作成
    t = np.arange(len(data)) / sr

    # パラメータ設定: 標本化周波数と量子化ビット数
    fs = st.slider("標本化周波数 (Hz)", min_value=1000, max_value=sr, value=int(sr/2), step=100)
    bits = st.slider("量子化ビット数", min_value=1, max_value=16, value=8)

    # 元波形表示
    df_orig = pd.DataFrame({"振幅": data}, index=t)
    st.line_chart(df_orig)

    # ダウンサンプリング表示 (単純間引き)
    factor = max(int(sr / fs), 1)
    data_resampled = data[::factor]
    t_resampled = t[::factor]
    df_res = pd.DataFrame({"振幅 (標本点)": data_resampled}, index=t_resampled)
    st.line_chart(df_res)

    # デジタル化プロセス (最初の5 標本点)
    max_val = np.max(np.abs(data_resampled))
    norm = data_resampled[:5] / max_val if max_val != 0 else data_resampled[:5]
    levels = 2 ** bits
    q = np.round((norm + 1) / 2 * (levels - 1)).astype(int)

    for i in range(5):
        st.write(f"--- ステップ {i+1} ---")
        st.write(f"時間: {t_resampled[i]:.4f} 秒")
        st.write(f"量子化前の値: {data_resampled[i]:.4f}")
        st.write(f"正規化値: {norm[i]:.4f}")
        st.write(f"量子化レベル: {q[i]} / {levels - 1}")
        binary = format(int(q[i]), f'0{bits}b')
        st.write(f"符号化 (2進数): {binary}")
        time.sleep(1)

    st.success("デジタル化プロセス完了！")